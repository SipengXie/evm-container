package test

import (
	"context"
	"encoding/json"
	"evm-container/common"
	"evm-container/config"
	"evm-container/rpc/rpcclient"
	"evm-container/rpc/types/rpc"
	"math"
	"math/big"
	"testing"

	"github.com/zeromicro/go-zero/core/discov"
	"github.com/zeromicro/go-zero/zrpc"
)

func TestRpcNewEnv(t *testing.T) {

	rpcConf := zrpc.RpcClientConf{
		Etcd: discov.EtcdConf{
			Hosts: []string{"127.0.0.1:2379"},
			Key:   "evm.rpc",
		},
	}
	EvmRpc := rpcclient.NewRpc(zrpc.MustNewClient(rpcConf))

	cfg := new(config.Config)
	config.SetDefaults(cfg)

	cfg_bytes, err := json.Marshal(cfg)
	if err != nil {
		t.Fatal(err)
	}

	res, err := EvmRpc.NewEnv(context.Background(), &rpc.NewEnvRequest{
		Config: cfg_bytes,
	})
	if err != nil {
		t.Fatal(err)
	}

	t.Log(res.Code)
}

func TestRpcCreate(t *testing.T) {

	rpcConf := zrpc.RpcClientConf{
		Etcd: discov.EtcdConf{
			Hosts: []string{"127.0.0.1:2379"},
			Key:   "evm.rpc",
		},
	}
	EvmRpc := rpcclient.NewRpc(zrpc.MustNewClient(rpcConf))

	caller := common.BytesToAddress([]byte("deployer"))
	code := "608060405234801561001057600080fd5b506101d6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063771602f714610030575b600080fd5b61004a6004803603810190610045919061008b565b610060565b60405161005791906100da565b60405180910390f35b6000818361006e91906100f5565b905092915050565b60008135905061008581610189565b92915050565b600080604083850312156100a2576100a1610184565b5b60006100b085828601610076565b92505060206100c185828601610076565b9150509250929050565b6100d48161014b565b82525050565b60006020820190506100ef60008301846100cb565b92915050565b60006101008261014b565b915061010b8361014b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101405761013f610155565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6101928161014b565b811461019d57600080fd5b5056fea264697066735822122081d5aab419bede5a1093121d0a0ded9cba91d5d72688b3518a2e323b9865936f64736f6c63430008070033"
	value := new(big.Int).String()

	res, err := EvmRpc.Create(context.Background(), &rpc.CreateRequest{
		Caller: caller.Bytes(),
		Code:   common.Hex2Bytes(code),
		Gas:    math.MaxUint64,
		Value:  value,
	})
	if err != nil {
		t.Fatal(err)
	}

	t.Log("contract_address:", res.ContractAddr)
	t.Log("left Gas:", res.LeftOverGas)
	t.Log("returned code", res.Ret)
}

func TestRpcCreateAndCall(t *testing.T) {

	rpcConf := zrpc.RpcClientConf{
		Etcd: discov.EtcdConf{
			Hosts: []string{"127.0.0.1:2379"},
			Key:   "evm.rpc",
		},
	}
	EvmRpc := rpcclient.NewRpc(zrpc.MustNewClient(rpcConf))

	caller := common.BytesToAddress([]byte("deployer"))
	// A + B
	// HexTestCode := "608060405234801561001057600080fd5b506101d6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063771602f714610030575b600080fd5b61004a6004803603810190610045919061008b565b610060565b60405161005791906100da565b60405180910390f35b6000818361006e91906100f5565b905092915050565b60008135905061008581610189565b92915050565b600080604083850312156100a2576100a1610184565b5b60006100b085828601610076565b92505060206100c185828601610076565b9150509250929050565b6100d48161014b565b82525050565b60006020820190506100ef60008301846100cb565b92915050565b60006101008261014b565b915061010b8361014b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101405761013f610155565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6101928161014b565b811461019d57600080fd5b5056fea264697066735822122081d5aab419bede5a1093121d0a0ded9cba91d5d72688b3518a2e323b9865936f64736f6c63430008070033"
	// TestInput := "771602f700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
	value := new(big.Int).String()
	// outsider contract
	// calls cry-container:8003
	HexTestCode := common.Hex2Bytes("608060405234801561001057600080fd5b50610d37806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063163b746614610030575b600080fd5b61004a600480360381019061004591906104c7565b610061565b604051610058929190610641565b60405180910390f35b600060606000604051806060016040528060258152602001610cdd60259139905060006040518060400160405280601381526020017f226861736854797065223a227363727970742200000000000000000000000000815250905060008c8c6040516020016100d19291906106fc565b604051602081830303815290604052905060008b8b6040516020016100f7929190610759565b604051602081830303815290604052905060006101138b6102c2565b60405160200161012391906107e7565b6040516020818303038152906040529050600061013f8b6102c2565b60405160200161014f9190610833565b6040516020818303038152906040529050600061016b8b6102c2565b60405160200161017b919061087f565b604051602081830303815290604052905060006101978b6102c2565b6040516020016101a791906108cb565b60405160208183030381529060405290506000878787878787876040516020016101d79796959493929190610963565b6040516020818303038152906040529050600089826040516020016101fd929190610a66565b60405160208183030381529060405290506000601990506000808273ffffffffffffffffffffffffffffffffffffffff168460405160200161023f9190610a99565b60405160208183030381529060405260405161025b9190610af7565b6000604051808303816000865af19150503d8060008114610298576040519150601f19603f3d011682016040523d82523d6000602084013e61029d565b606091505b509150915081819e509e50505050505050505050505050509850989650505050505050565b606060008203610309576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061041d565b600082905060005b6000821461033b57808061032490610b3d565b915050600a826103349190610bb4565b9150610311565b60008167ffffffffffffffff81111561035757610356610be5565b5b6040519080825280601f01601f1916602001820160405280156103895781602001600182028036833780820191505090505b5090505b60008514610416576001826103a29190610c14565b9150600a856103b19190610c48565b60306103bd9190610c79565b60f81b8183815181106103d3576103d2610cad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561040f9190610bb4565b945061038d565b8093505050505b919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126104515761045061042c565b5b8235905067ffffffffffffffff81111561046e5761046d610431565b5b60208301915083600182028301111561048a57610489610436565b5b9250929050565b6000819050919050565b6104a481610491565b81146104af57600080fd5b50565b6000813590506104c18161049b565b92915050565b60008060008060008060008060c0898b0312156104e7576104e6610422565b5b600089013567ffffffffffffffff81111561050557610504610427565b5b6105118b828c0161043b565b9850985050602089013567ffffffffffffffff81111561053457610533610427565b5b6105408b828c0161043b565b965096505060406105538b828c016104b2565b94505060606105648b828c016104b2565b93505060806105758b828c016104b2565b92505060a06105868b828c016104b2565b9150509295985092959890939650565b60008115159050919050565b6105ab81610596565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105eb5780820151818401526020810190506105d0565b60008484015250505050565b6000601f19601f8301169050919050565b6000610613826105b1565b61061d81856105bc565b935061062d8185602086016105cd565b610636816105f7565b840191505092915050565b600060408201905061065660008301856105a2565b81810360208301526106688184610608565b90509392505050565b7f22686173684d657373616765223a220000000000000000000000000000000000815250565b600081905092915050565b82818337600083830152505050565b60006106bd8385610697565b93506106ca8385846106a2565b82840190509392505050565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b600061070782610671565b600f820191506107188284866106b1565b9150610723826106d6565b6001820191508190509392505050565b7f2273616c74223a22000000000000000000000000000000000000000000000000815250565b600061076482610733565b6008820191506107758284866106b1565b9150610780826106d6565b6001820191508190509392505050565b7f226e223a00000000000000000000000000000000000000000000000000000000815250565b60006107c1826105b1565b6107cb8185610697565b93506107db8185602086016105cd565b80840191505092915050565b60006107f282610790565b60048201915061080282846107b6565b915081905092915050565b7f2272223a00000000000000000000000000000000000000000000000000000000815250565b600061083e8261080d565b60048201915061084e82846107b6565b915081905092915050565b7f2270223a00000000000000000000000000000000000000000000000000000000815250565b600061088a82610859565b60048201915061089a82846107b6565b915081905092915050565b7f226b65794c656e223a0000000000000000000000000000000000000000000000815250565b60006108d6826108a5565b6009820191506108e682846107b6565b915081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000815250565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b7f7d00000000000000000000000000000000000000000000000000000000000000815250565b600061096e826108f1565b60018201915061097e828a6107b6565b915061098982610917565b60018201915061099982896107b6565b91506109a482610917565b6001820191506109b482886107b6565b91506109bf82610917565b6001820191506109cf82876107b6565b91506109da82610917565b6001820191506109ea82866107b6565b91506109f582610917565b600182019150610a0582856107b6565b9150610a1082610917565b600182019150610a2082846107b6565b9150610a2b8261093d565b60018201915081905098975050505050505050565b7f2400000000000000000000000000000000000000000000000000000000000000815250565b6000610a7282856107b6565b9150610a7d82610a40565b600182019150610a8d82846107b6565b91508190509392505050565b6000610aa582846107b6565b915081905092915050565b600081519050919050565b600081905092915050565b6000610ad182610ab0565b610adb8185610abb565b9350610aeb8185602086016105cd565b80840191505092915050565b6000610b038284610ac6565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b4882610491565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b7a57610b79610b0e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bbf82610491565b9150610bca83610491565b925082610bda57610bd9610b85565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610c1f82610491565b9150610c2a83610491565b9250828203905081811115610c4257610c41610b0e565b5b92915050565b6000610c5382610491565b9150610c5e83610491565b925082610c6e57610c6d610b85565b5b828206905092915050565b6000610c8482610491565b9150610c8f83610491565b9250828201905080821115610ca757610ca6610b0e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe687474703a2f2f6372792d636f6e7461696e65723a383030332f63727970746f2f68617368a2646970667358221220f5b394919753b592769d2f4b23cd8e604bdb0fd4b6bc0ccc14122320cb88267864736f6c63430008130033")
	// calls 127.0.0.1:8003
	// HexTestCode := common.Hex2Bytes("608060405234801561001057600080fd5b50610d33806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063163b746614610030575b600080fd5b61004a600480360381019061004591906104c7565b610061565b604051610058929190610641565b60405180910390f35b600060606000604051806060016040528060218152602001610cdd60219139905060006040518060400160405280601381526020017f226861736854797065223a227363727970742200000000000000000000000000815250905060008c8c6040516020016100d19291906106fc565b604051602081830303815290604052905060008b8b6040516020016100f7929190610759565b604051602081830303815290604052905060006101138b6102c2565b60405160200161012391906107e7565b6040516020818303038152906040529050600061013f8b6102c2565b60405160200161014f9190610833565b6040516020818303038152906040529050600061016b8b6102c2565b60405160200161017b919061087f565b604051602081830303815290604052905060006101978b6102c2565b6040516020016101a791906108cb565b60405160208183030381529060405290506000878787878787876040516020016101d79796959493929190610963565b6040516020818303038152906040529050600089826040516020016101fd929190610a66565b60405160208183030381529060405290506000601990506000808273ffffffffffffffffffffffffffffffffffffffff168460405160200161023f9190610a99565b60405160208183030381529060405260405161025b9190610af7565b6000604051808303816000865af19150503d8060008114610298576040519150601f19603f3d011682016040523d82523d6000602084013e61029d565b606091505b509150915081819e509e50505050505050505050505050509850989650505050505050565b606060008203610309576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061041d565b600082905060005b6000821461033b57808061032490610b3d565b915050600a826103349190610bb4565b9150610311565b60008167ffffffffffffffff81111561035757610356610be5565b5b6040519080825280601f01601f1916602001820160405280156103895781602001600182028036833780820191505090505b5090505b60008514610416576001826103a29190610c14565b9150600a856103b19190610c48565b60306103bd9190610c79565b60f81b8183815181106103d3576103d2610cad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561040f9190610bb4565b945061038d565b8093505050505b919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126104515761045061042c565b5b8235905067ffffffffffffffff81111561046e5761046d610431565b5b60208301915083600182028301111561048a57610489610436565b5b9250929050565b6000819050919050565b6104a481610491565b81146104af57600080fd5b50565b6000813590506104c18161049b565b92915050565b60008060008060008060008060c0898b0312156104e7576104e6610422565b5b600089013567ffffffffffffffff81111561050557610504610427565b5b6105118b828c0161043b565b9850985050602089013567ffffffffffffffff81111561053457610533610427565b5b6105408b828c0161043b565b965096505060406105538b828c016104b2565b94505060606105648b828c016104b2565b93505060806105758b828c016104b2565b92505060a06105868b828c016104b2565b9150509295985092959890939650565b60008115159050919050565b6105ab81610596565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105eb5780820151818401526020810190506105d0565b60008484015250505050565b6000601f19601f8301169050919050565b6000610613826105b1565b61061d81856105bc565b935061062d8185602086016105cd565b610636816105f7565b840191505092915050565b600060408201905061065660008301856105a2565b81810360208301526106688184610608565b90509392505050565b7f22686173684d657373616765223a220000000000000000000000000000000000815250565b600081905092915050565b82818337600083830152505050565b60006106bd8385610697565b93506106ca8385846106a2565b82840190509392505050565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b600061070782610671565b600f820191506107188284866106b1565b9150610723826106d6565b6001820191508190509392505050565b7f2273616c74223a22000000000000000000000000000000000000000000000000815250565b600061076482610733565b6008820191506107758284866106b1565b9150610780826106d6565b6001820191508190509392505050565b7f226e223a00000000000000000000000000000000000000000000000000000000815250565b60006107c1826105b1565b6107cb8185610697565b93506107db8185602086016105cd565b80840191505092915050565b60006107f282610790565b60048201915061080282846107b6565b915081905092915050565b7f2272223a00000000000000000000000000000000000000000000000000000000815250565b600061083e8261080d565b60048201915061084e82846107b6565b915081905092915050565b7f2270223a00000000000000000000000000000000000000000000000000000000815250565b600061088a82610859565b60048201915061089a82846107b6565b915081905092915050565b7f226b65794c656e223a0000000000000000000000000000000000000000000000815250565b60006108d6826108a5565b6009820191506108e682846107b6565b915081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000815250565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b7f7d00000000000000000000000000000000000000000000000000000000000000815250565b600061096e826108f1565b60018201915061097e828a6107b6565b915061098982610917565b60018201915061099982896107b6565b91506109a482610917565b6001820191506109b482886107b6565b91506109bf82610917565b6001820191506109cf82876107b6565b91506109da82610917565b6001820191506109ea82866107b6565b91506109f582610917565b600182019150610a0582856107b6565b9150610a1082610917565b600182019150610a2082846107b6565b9150610a2b8261093d565b60018201915081905098975050505050505050565b7f2400000000000000000000000000000000000000000000000000000000000000815250565b6000610a7282856107b6565b9150610a7d82610a40565b600182019150610a8d82846107b6565b91508190509392505050565b6000610aa582846107b6565b915081905092915050565b600081519050919050565b600081905092915050565b6000610ad182610ab0565b610adb8185610abb565b9350610aeb8185602086016105cd565b80840191505092915050565b6000610b038284610ac6565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b4882610491565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b7a57610b79610b0e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bbf82610491565b9150610bca83610491565b925082610bda57610bd9610b85565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610c1f82610491565b9150610c2a83610491565b9250828203905081811115610c4257610c41610b0e565b5b92915050565b6000610c5382610491565b9150610c5e83610491565b925082610c6e57610c6d610b85565b5b828206905092915050565b6000610c8482610491565b9150610c8f83610491565b9250828201905080821115610ca757610ca6610b0e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe687474703a2f2f3132372e302e302e313a383030332f63727970746f2f68617368a264697066735822122081cabdef4cbc7f91a4c98b6b3b24ac1946dfc8b6f95e1620105b4ef2d4cb09f264736f6c63430008130033")
	TestInput := common.Hex2Bytes("163b746600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004746573740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043131313100000000000000000000000000000000000000000000000000000000")

	res, err := EvmRpc.Create(context.Background(), &rpc.CreateRequest{
		Caller: caller.Bytes(),
		Code:   HexTestCode,
		Gas:    math.MaxUint64,
		Value:  value,
	})
	if err != nil {
		t.Fatal(err)
	}

	t.Log("contract_address:", res.ContractAddr)
	t.Log("left Gas:", res.LeftOverGas)
	t.Log("returned code", res.Ret)

	newres, err := EvmRpc.Call(context.Background(), &rpc.CallRequest{
		Caller: caller.Bytes(),
		Addr:   res.ContractAddr,
		Input:  TestInput,
		Gas:    math.MaxUint64,
		Value:  value,
	})
	if err != nil {
		t.Fatal(err)
	}

	t.Log("return:", string(newres.Ret))
	t.Log("left gas:", newres.LeftOverGas)

}
