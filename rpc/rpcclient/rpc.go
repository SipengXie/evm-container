// Code generated by goctl. DO NOT EDIT.
// Source: evm.proto

package rpcclient

import (
	"context"

	"evm-container/rpc/types/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CallRequest             = rpc.CallRequest
	CallResponse            = rpc.CallResponse
	CancelRequset           = rpc.CancelRequset
	CancelResponse          = rpc.CancelResponse
	CancelledRequest        = rpc.CancelledRequest
	CancelledResponse       = rpc.CancelledResponse
	ChainConfigRequest      = rpc.ChainConfigRequest
	ChainConfigResponse     = rpc.ChainConfigResponse
	Create2Request          = rpc.Create2Request
	Create2Response         = rpc.Create2Response
	CreateRequest           = rpc.CreateRequest
	CreateResponse          = rpc.CreateResponse
	DelegateCallRequest     = rpc.DelegateCallRequest
	DelegateCallResponse    = rpc.DelegateCallResponse
	NewEnvRequest           = rpc.NewEnvRequest
	NewEnvResponse          = rpc.NewEnvResponse
	ResetRequest            = rpc.ResetRequest
	ResetResponse           = rpc.ResetResponse
	SetBlockContextRequest  = rpc.SetBlockContextRequest
	SetBlockContextResponse = rpc.SetBlockContextResponse
	StaticCallRequest       = rpc.StaticCallRequest
	StaticCallResponse      = rpc.StaticCallResponse

	Rpc interface {
		NewEnv(ctx context.Context, in *NewEnvRequest, opts ...grpc.CallOption) (*NewEnvResponse, error)
		SetBlockContext(ctx context.Context, in *SetBlockContextRequest, opts ...grpc.CallOption) (*SetBlockContextResponse, error)
		Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
		Cancel(ctx context.Context, in *CancelRequset, opts ...grpc.CallOption) (*CancelResponse, error)
		Cancelled(ctx context.Context, in *CancelledRequest, opts ...grpc.CallOption) (*CancelledResponse, error)
		Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
		DelegateCall(ctx context.Context, in *DelegateCallRequest, opts ...grpc.CallOption) (*DelegateCallResponse, error)
		StaticCall(ctx context.Context, in *StaticCallRequest, opts ...grpc.CallOption) (*StaticCallResponse, error)
		Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		Create2(ctx context.Context, in *Create2Request, opts ...grpc.CallOption) (*Create2Response, error)
		ChainConfig(ctx context.Context, in *ChainConfigRequest, opts ...grpc.CallOption) (*ChainConfigResponse, error)
	}

	defaultRpc struct {
		cli zrpc.Client
	}
)

func NewRpc(cli zrpc.Client) Rpc {
	return &defaultRpc{
		cli: cli,
	}
}

func (m *defaultRpc) NewEnv(ctx context.Context, in *NewEnvRequest, opts ...grpc.CallOption) (*NewEnvResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.NewEnv(ctx, in, opts...)
}

func (m *defaultRpc) SetBlockContext(ctx context.Context, in *SetBlockContextRequest, opts ...grpc.CallOption) (*SetBlockContextResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.SetBlockContext(ctx, in, opts...)
}

func (m *defaultRpc) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Reset(ctx, in, opts...)
}

func (m *defaultRpc) Cancel(ctx context.Context, in *CancelRequset, opts ...grpc.CallOption) (*CancelResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Cancel(ctx, in, opts...)
}

func (m *defaultRpc) Cancelled(ctx context.Context, in *CancelledRequest, opts ...grpc.CallOption) (*CancelledResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Cancelled(ctx, in, opts...)
}

func (m *defaultRpc) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Call(ctx, in, opts...)
}

func (m *defaultRpc) DelegateCall(ctx context.Context, in *DelegateCallRequest, opts ...grpc.CallOption) (*DelegateCallResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.DelegateCall(ctx, in, opts...)
}

func (m *defaultRpc) StaticCall(ctx context.Context, in *StaticCallRequest, opts ...grpc.CallOption) (*StaticCallResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.StaticCall(ctx, in, opts...)
}

func (m *defaultRpc) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultRpc) Create2(ctx context.Context, in *Create2Request, opts ...grpc.CallOption) (*Create2Response, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Create2(ctx, in, opts...)
}

func (m *defaultRpc) ChainConfig(ctx context.Context, in *ChainConfigRequest, opts ...grpc.CallOption) (*ChainConfigResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.ChainConfig(ctx, in, opts...)
}
