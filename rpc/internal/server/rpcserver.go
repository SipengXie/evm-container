// Code generated by goctl. DO NOT EDIT.
// Source: evm.proto

package server

import (
	"context"

	"evm-container/rpc/internal/logic"
	"evm-container/rpc/internal/svc"
	"evm-container/rpc/types/rpc"
)

type RpcServer struct {
	svcCtx *svc.ServiceContext
	rpc.UnimplementedRpcServer
}

func NewRpcServer(svcCtx *svc.ServiceContext) *RpcServer {
	return &RpcServer{
		svcCtx: svcCtx,
	}
}

func (s *RpcServer) NewEnv(ctx context.Context, in *rpc.NewEnvRequest) (*rpc.NewEnvResponse, error) {
	l := logic.NewNewEnvLogic(ctx, s.svcCtx)
	return l.NewEnv(in)
}

func (s *RpcServer) SetBlockContext(ctx context.Context, in *rpc.SetBlockContextRequest) (*rpc.SetBlockContextResponse, error) {
	l := logic.NewSetBlockContextLogic(ctx, s.svcCtx)
	return l.SetBlockContext(in)
}

func (s *RpcServer) Reset(ctx context.Context, in *rpc.ResetRequest) (*rpc.ResetResponse, error) {
	l := logic.NewResetLogic(ctx, s.svcCtx)
	return l.Reset(in)
}

func (s *RpcServer) Cancel(ctx context.Context, in *rpc.CancelRequset) (*rpc.CancelResponse, error) {
	l := logic.NewCancelLogic(ctx, s.svcCtx)
	return l.Cancel(in)
}

func (s *RpcServer) Cancelled(ctx context.Context, in *rpc.CancelledRequest) (*rpc.CancelledResponse, error) {
	l := logic.NewCancelledLogic(ctx, s.svcCtx)
	return l.Cancelled(in)
}

func (s *RpcServer) Call(ctx context.Context, in *rpc.CallRequest) (*rpc.CallResponse, error) {
	l := logic.NewCallLogic(ctx, s.svcCtx)
	return l.Call(in)
}

func (s *RpcServer) DelegateCall(ctx context.Context, in *rpc.DelegateCallRequest) (*rpc.DelegateCallResponse, error) {
	l := logic.NewDelegateCallLogic(ctx, s.svcCtx)
	return l.DelegateCall(in)
}

func (s *RpcServer) StaticCall(ctx context.Context, in *rpc.StaticCallRequest) (*rpc.StaticCallResponse, error) {
	l := logic.NewStaticCallLogic(ctx, s.svcCtx)
	return l.StaticCall(in)
}

func (s *RpcServer) Create(ctx context.Context, in *rpc.CreateRequest) (*rpc.CreateResponse, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

func (s *RpcServer) Create2(ctx context.Context, in *rpc.Create2Request) (*rpc.Create2Response, error) {
	l := logic.NewCreate2Logic(ctx, s.svcCtx)
	return l.Create2(in)
}

func (s *RpcServer) ChainConfig(ctx context.Context, in *rpc.ChainConfigRequest) (*rpc.ChainConfigResponse, error) {
	l := logic.NewChainConfigLogic(ctx, s.svcCtx)
	return l.ChainConfig(in)
}
