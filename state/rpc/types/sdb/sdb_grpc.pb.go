// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sdb.proto

package sdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sdb_CreateAccount_FullMethodName          = "/sdb.Sdb/CreateAccount"
	Sdb_SubBalance_FullMethodName             = "/sdb.Sdb/SubBalance"
	Sdb_AddBalance_FullMethodName             = "/sdb.Sdb/AddBalance"
	Sdb_GetBalance_FullMethodName             = "/sdb.Sdb/GetBalance"
	Sdb_Suicide_FullMethodName                = "/sdb.Sdb/Suicide"
	Sdb_HasSuicided_FullMethodName            = "/sdb.Sdb/HasSuicided"
	Sdb_GetNonce_FullMethodName               = "/sdb.Sdb/GetNonce"
	Sdb_SetNonce_FullMethodName               = "/sdb.Sdb/SetNonce"
	Sdb_GetCodeHash_FullMethodName            = "/sdb.Sdb/GetCodeHash"
	Sdb_GetCode_FullMethodName                = "/sdb.Sdb/GetCode"
	Sdb_SetCode_FullMethodName                = "/sdb.Sdb/SetCode"
	Sdb_GetCodeSize_FullMethodName            = "/sdb.Sdb/GetCodeSize"
	Sdb_AddRefund_FullMethodName              = "/sdb.Sdb/AddRefund"
	Sdb_SubRefund_FullMethodName              = "/sdb.Sdb/SubRefund"
	Sdb_GetRefund_FullMethodName              = "/sdb.Sdb/GetRefund"
	Sdb_GetTransientState_FullMethodName      = "/sdb.Sdb/GetTransientState"
	Sdb_SetTransientState_FullMethodName      = "/sdb.Sdb/SetTransientState"
	Sdb_Exist_FullMethodName                  = "/sdb.Sdb/Exist"
	Sdb_Empty_FullMethodName                  = "/sdb.Sdb/Empty"
	Sdb_AddressInAccessList_FullMethodName    = "/sdb.Sdb/AddressInAccessList"
	Sdb_SlotInAccessList_FullMethodName       = "/sdb.Sdb/SlotInAccessList"
	Sdb_AddAddressToAccessList_FullMethodName = "/sdb.Sdb/AddAddressToAccessList"
	Sdb_AddSlotToAccessList_FullMethodName    = "/sdb.Sdb/AddSlotToAccessList"
	Sdb_RevertToSnapshot_FullMethodName       = "/sdb.Sdb/RevertToSnapshot"
	Sdb_Snapshot_FullMethodName               = "/sdb.Sdb/Snapshot"
	Sdb_AddPreimage_FullMethodName            = "/sdb.Sdb/AddPreimage"
	Sdb_AddLog_FullMethodName                 = "/sdb.Sdb/AddLog"
	Sdb_AddLogJson_FullMethodName             = "/sdb.Sdb/AddLogJson"
	Sdb_Prepare_FullMethodName                = "/sdb.Sdb/Prepare"
	Sdb_GetCommittedState_FullMethodName      = "/sdb.Sdb/GetCommittedState"
	Sdb_GetState_FullMethodName               = "/sdb.Sdb/GetState"
	Sdb_SetState_FullMethodName               = "/sdb.Sdb/SetState"
	Sdb_SetTxContext_FullMethodName           = "/sdb.Sdb/SetTxContext"
)

// SdbClient is the client API for Sdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdbClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	SubBalance(ctx context.Context, in *SubBalanceRequest, opts ...grpc.CallOption) (*SubBalanceResponse, error)
	AddBalance(ctx context.Context, in *AddBalanceRequest, opts ...grpc.CallOption) (*AddBalanceResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	Suicide(ctx context.Context, in *SuicideRequest, opts ...grpc.CallOption) (*SuicideResponse, error)
	HasSuicided(ctx context.Context, in *HasSuicidedRequest, opts ...grpc.CallOption) (*HasSuicidedResponse, error)
	GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error)
	SetNonce(ctx context.Context, in *SetNonceRequest, opts ...grpc.CallOption) (*SetNonceResponse, error)
	GetCodeHash(ctx context.Context, in *GetCodeHashRequest, opts ...grpc.CallOption) (*GetCodeHashResponse, error)
	GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error)
	SetCode(ctx context.Context, in *SetCodeRequest, opts ...grpc.CallOption) (*SetCodeResponse, error)
	GetCodeSize(ctx context.Context, in *GetCodeSizeRequest, opts ...grpc.CallOption) (*GetCodeSizeResponse, error)
	AddRefund(ctx context.Context, in *AddRefundRequest, opts ...grpc.CallOption) (*AddRefundResponse, error)
	SubRefund(ctx context.Context, in *SubRefundRequest, opts ...grpc.CallOption) (*SubRefundResponse, error)
	GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error)
	GetTransientState(ctx context.Context, in *GetTransientStateRequest, opts ...grpc.CallOption) (*GetTransientStateResponse, error)
	SetTransientState(ctx context.Context, in *SetTransientStateRequest, opts ...grpc.CallOption) (*SetTransientStateResponse, error)
	Exist(ctx context.Context, in *ExistRequest, opts ...grpc.CallOption) (*ExistResponse, error)
	Empty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddressInAccessList(ctx context.Context, in *AddressInAccessListRequest, opts ...grpc.CallOption) (*AddressInAccessListResponse, error)
	SlotInAccessList(ctx context.Context, in *SlotInAccessListRequest, opts ...grpc.CallOption) (*SlotInAccessListResponse, error)
	AddAddressToAccessList(ctx context.Context, in *AddAddressToAccessListRequest, opts ...grpc.CallOption) (*AddAddressToAccessListResponse, error)
	AddSlotToAccessList(ctx context.Context, in *AddSlotToAccessListRequest, opts ...grpc.CallOption) (*AddSlotToAccessListResponse, error)
	RevertToSnapshot(ctx context.Context, in *RevertToSnapshotRequest, opts ...grpc.CallOption) (*RevertToSnapshotResponse, error)
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	AddPreimage(ctx context.Context, in *AddPreimageRequest, opts ...grpc.CallOption) (*AddPreimageResponse, error)
	AddLog(ctx context.Context, in *AddLogRequest, opts ...grpc.CallOption) (*AddLogRespond, error)
	AddLogJson(ctx context.Context, in *AddLogJsonRequest, opts ...grpc.CallOption) (*AddLogJsonRespond, error)
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareRespond, error)
	GetCommittedState(ctx context.Context, in *GetCommittedStateRequest, opts ...grpc.CallOption) (*GetCommittedStateResponse, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	SetTxContext(ctx context.Context, in *SetTxContextRequest, opts ...grpc.CallOption) (*SetTxContextResponse, error)
}

type sdbClient struct {
	cc grpc.ClientConnInterface
}

func NewSdbClient(cc grpc.ClientConnInterface) SdbClient {
	return &sdbClient{cc}
}

func (c *sdbClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, Sdb_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SubBalance(ctx context.Context, in *SubBalanceRequest, opts ...grpc.CallOption) (*SubBalanceResponse, error) {
	out := new(SubBalanceResponse)
	err := c.cc.Invoke(ctx, Sdb_SubBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddBalance(ctx context.Context, in *AddBalanceRequest, opts ...grpc.CallOption) (*AddBalanceResponse, error) {
	out := new(AddBalanceResponse)
	err := c.cc.Invoke(ctx, Sdb_AddBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, Sdb_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) Suicide(ctx context.Context, in *SuicideRequest, opts ...grpc.CallOption) (*SuicideResponse, error) {
	out := new(SuicideResponse)
	err := c.cc.Invoke(ctx, Sdb_Suicide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) HasSuicided(ctx context.Context, in *HasSuicidedRequest, opts ...grpc.CallOption) (*HasSuicidedResponse, error) {
	out := new(HasSuicidedResponse)
	err := c.cc.Invoke(ctx, Sdb_HasSuicided_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error) {
	out := new(GetNonceResponse)
	err := c.cc.Invoke(ctx, Sdb_GetNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SetNonce(ctx context.Context, in *SetNonceRequest, opts ...grpc.CallOption) (*SetNonceResponse, error) {
	out := new(SetNonceResponse)
	err := c.cc.Invoke(ctx, Sdb_SetNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetCodeHash(ctx context.Context, in *GetCodeHashRequest, opts ...grpc.CallOption) (*GetCodeHashResponse, error) {
	out := new(GetCodeHashResponse)
	err := c.cc.Invoke(ctx, Sdb_GetCodeHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error) {
	out := new(GetCodeResponse)
	err := c.cc.Invoke(ctx, Sdb_GetCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SetCode(ctx context.Context, in *SetCodeRequest, opts ...grpc.CallOption) (*SetCodeResponse, error) {
	out := new(SetCodeResponse)
	err := c.cc.Invoke(ctx, Sdb_SetCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetCodeSize(ctx context.Context, in *GetCodeSizeRequest, opts ...grpc.CallOption) (*GetCodeSizeResponse, error) {
	out := new(GetCodeSizeResponse)
	err := c.cc.Invoke(ctx, Sdb_GetCodeSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddRefund(ctx context.Context, in *AddRefundRequest, opts ...grpc.CallOption) (*AddRefundResponse, error) {
	out := new(AddRefundResponse)
	err := c.cc.Invoke(ctx, Sdb_AddRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SubRefund(ctx context.Context, in *SubRefundRequest, opts ...grpc.CallOption) (*SubRefundResponse, error) {
	out := new(SubRefundResponse)
	err := c.cc.Invoke(ctx, Sdb_SubRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error) {
	out := new(GetRefundResponse)
	err := c.cc.Invoke(ctx, Sdb_GetRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetTransientState(ctx context.Context, in *GetTransientStateRequest, opts ...grpc.CallOption) (*GetTransientStateResponse, error) {
	out := new(GetTransientStateResponse)
	err := c.cc.Invoke(ctx, Sdb_GetTransientState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SetTransientState(ctx context.Context, in *SetTransientStateRequest, opts ...grpc.CallOption) (*SetTransientStateResponse, error) {
	out := new(SetTransientStateResponse)
	err := c.cc.Invoke(ctx, Sdb_SetTransientState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) Exist(ctx context.Context, in *ExistRequest, opts ...grpc.CallOption) (*ExistResponse, error) {
	out := new(ExistResponse)
	err := c.cc.Invoke(ctx, Sdb_Exist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) Empty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Sdb_Empty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddressInAccessList(ctx context.Context, in *AddressInAccessListRequest, opts ...grpc.CallOption) (*AddressInAccessListResponse, error) {
	out := new(AddressInAccessListResponse)
	err := c.cc.Invoke(ctx, Sdb_AddressInAccessList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SlotInAccessList(ctx context.Context, in *SlotInAccessListRequest, opts ...grpc.CallOption) (*SlotInAccessListResponse, error) {
	out := new(SlotInAccessListResponse)
	err := c.cc.Invoke(ctx, Sdb_SlotInAccessList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddAddressToAccessList(ctx context.Context, in *AddAddressToAccessListRequest, opts ...grpc.CallOption) (*AddAddressToAccessListResponse, error) {
	out := new(AddAddressToAccessListResponse)
	err := c.cc.Invoke(ctx, Sdb_AddAddressToAccessList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddSlotToAccessList(ctx context.Context, in *AddSlotToAccessListRequest, opts ...grpc.CallOption) (*AddSlotToAccessListResponse, error) {
	out := new(AddSlotToAccessListResponse)
	err := c.cc.Invoke(ctx, Sdb_AddSlotToAccessList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) RevertToSnapshot(ctx context.Context, in *RevertToSnapshotRequest, opts ...grpc.CallOption) (*RevertToSnapshotResponse, error) {
	out := new(RevertToSnapshotResponse)
	err := c.cc.Invoke(ctx, Sdb_RevertToSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, Sdb_Snapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddPreimage(ctx context.Context, in *AddPreimageRequest, opts ...grpc.CallOption) (*AddPreimageResponse, error) {
	out := new(AddPreimageResponse)
	err := c.cc.Invoke(ctx, Sdb_AddPreimage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddLog(ctx context.Context, in *AddLogRequest, opts ...grpc.CallOption) (*AddLogRespond, error) {
	out := new(AddLogRespond)
	err := c.cc.Invoke(ctx, Sdb_AddLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddLogJson(ctx context.Context, in *AddLogJsonRequest, opts ...grpc.CallOption) (*AddLogJsonRespond, error) {
	out := new(AddLogJsonRespond)
	err := c.cc.Invoke(ctx, Sdb_AddLogJson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareRespond, error) {
	out := new(PrepareRespond)
	err := c.cc.Invoke(ctx, Sdb_Prepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetCommittedState(ctx context.Context, in *GetCommittedStateRequest, opts ...grpc.CallOption) (*GetCommittedStateResponse, error) {
	out := new(GetCommittedStateResponse)
	err := c.cc.Invoke(ctx, Sdb_GetCommittedState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, Sdb_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, Sdb_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SetTxContext(ctx context.Context, in *SetTxContextRequest, opts ...grpc.CallOption) (*SetTxContextResponse, error) {
	out := new(SetTxContextResponse)
	err := c.cc.Invoke(ctx, Sdb_SetTxContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdbServer is the server API for Sdb service.
// All implementations must embed UnimplementedSdbServer
// for forward compatibility
type SdbServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	SubBalance(context.Context, *SubBalanceRequest) (*SubBalanceResponse, error)
	AddBalance(context.Context, *AddBalanceRequest) (*AddBalanceResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	Suicide(context.Context, *SuicideRequest) (*SuicideResponse, error)
	HasSuicided(context.Context, *HasSuicidedRequest) (*HasSuicidedResponse, error)
	GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error)
	SetNonce(context.Context, *SetNonceRequest) (*SetNonceResponse, error)
	GetCodeHash(context.Context, *GetCodeHashRequest) (*GetCodeHashResponse, error)
	GetCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error)
	SetCode(context.Context, *SetCodeRequest) (*SetCodeResponse, error)
	GetCodeSize(context.Context, *GetCodeSizeRequest) (*GetCodeSizeResponse, error)
	AddRefund(context.Context, *AddRefundRequest) (*AddRefundResponse, error)
	SubRefund(context.Context, *SubRefundRequest) (*SubRefundResponse, error)
	GetRefund(context.Context, *GetRefundRequest) (*GetRefundResponse, error)
	GetTransientState(context.Context, *GetTransientStateRequest) (*GetTransientStateResponse, error)
	SetTransientState(context.Context, *SetTransientStateRequest) (*SetTransientStateResponse, error)
	Exist(context.Context, *ExistRequest) (*ExistResponse, error)
	Empty(context.Context, *EmptyRequest) (*EmptyResponse, error)
	AddressInAccessList(context.Context, *AddressInAccessListRequest) (*AddressInAccessListResponse, error)
	SlotInAccessList(context.Context, *SlotInAccessListRequest) (*SlotInAccessListResponse, error)
	AddAddressToAccessList(context.Context, *AddAddressToAccessListRequest) (*AddAddressToAccessListResponse, error)
	AddSlotToAccessList(context.Context, *AddSlotToAccessListRequest) (*AddSlotToAccessListResponse, error)
	RevertToSnapshot(context.Context, *RevertToSnapshotRequest) (*RevertToSnapshotResponse, error)
	Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	AddPreimage(context.Context, *AddPreimageRequest) (*AddPreimageResponse, error)
	AddLog(context.Context, *AddLogRequest) (*AddLogRespond, error)
	AddLogJson(context.Context, *AddLogJsonRequest) (*AddLogJsonRespond, error)
	Prepare(context.Context, *PrepareRequest) (*PrepareRespond, error)
	GetCommittedState(context.Context, *GetCommittedStateRequest) (*GetCommittedStateResponse, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	SetTxContext(context.Context, *SetTxContextRequest) (*SetTxContextResponse, error)
	mustEmbedUnimplementedSdbServer()
}

// UnimplementedSdbServer must be embedded to have forward compatible implementations.
type UnimplementedSdbServer struct {
}

func (UnimplementedSdbServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedSdbServer) SubBalance(context.Context, *SubBalanceRequest) (*SubBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubBalance not implemented")
}
func (UnimplementedSdbServer) AddBalance(context.Context, *AddBalanceRequest) (*AddBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalance not implemented")
}
func (UnimplementedSdbServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedSdbServer) Suicide(context.Context, *SuicideRequest) (*SuicideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suicide not implemented")
}
func (UnimplementedSdbServer) HasSuicided(context.Context, *HasSuicidedRequest) (*HasSuicidedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasSuicided not implemented")
}
func (UnimplementedSdbServer) GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonce not implemented")
}
func (UnimplementedSdbServer) SetNonce(context.Context, *SetNonceRequest) (*SetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNonce not implemented")
}
func (UnimplementedSdbServer) GetCodeHash(context.Context, *GetCodeHashRequest) (*GetCodeHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeHash not implemented")
}
func (UnimplementedSdbServer) GetCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (UnimplementedSdbServer) SetCode(context.Context, *SetCodeRequest) (*SetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCode not implemented")
}
func (UnimplementedSdbServer) GetCodeSize(context.Context, *GetCodeSizeRequest) (*GetCodeSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeSize not implemented")
}
func (UnimplementedSdbServer) AddRefund(context.Context, *AddRefundRequest) (*AddRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRefund not implemented")
}
func (UnimplementedSdbServer) SubRefund(context.Context, *SubRefundRequest) (*SubRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubRefund not implemented")
}
func (UnimplementedSdbServer) GetRefund(context.Context, *GetRefundRequest) (*GetRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefund not implemented")
}
func (UnimplementedSdbServer) GetTransientState(context.Context, *GetTransientStateRequest) (*GetTransientStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransientState not implemented")
}
func (UnimplementedSdbServer) SetTransientState(context.Context, *SetTransientStateRequest) (*SetTransientStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTransientState not implemented")
}
func (UnimplementedSdbServer) Exist(context.Context, *ExistRequest) (*ExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (UnimplementedSdbServer) Empty(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Empty not implemented")
}
func (UnimplementedSdbServer) AddressInAccessList(context.Context, *AddressInAccessListRequest) (*AddressInAccessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressInAccessList not implemented")
}
func (UnimplementedSdbServer) SlotInAccessList(context.Context, *SlotInAccessListRequest) (*SlotInAccessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotInAccessList not implemented")
}
func (UnimplementedSdbServer) AddAddressToAccessList(context.Context, *AddAddressToAccessListRequest) (*AddAddressToAccessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddressToAccessList not implemented")
}
func (UnimplementedSdbServer) AddSlotToAccessList(context.Context, *AddSlotToAccessListRequest) (*AddSlotToAccessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSlotToAccessList not implemented")
}
func (UnimplementedSdbServer) RevertToSnapshot(context.Context, *RevertToSnapshotRequest) (*RevertToSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertToSnapshot not implemented")
}
func (UnimplementedSdbServer) Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedSdbServer) AddPreimage(context.Context, *AddPreimageRequest) (*AddPreimageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPreimage not implemented")
}
func (UnimplementedSdbServer) AddLog(context.Context, *AddLogRequest) (*AddLogRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLog not implemented")
}
func (UnimplementedSdbServer) AddLogJson(context.Context, *AddLogJsonRequest) (*AddLogJsonRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogJson not implemented")
}
func (UnimplementedSdbServer) Prepare(context.Context, *PrepareRequest) (*PrepareRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedSdbServer) GetCommittedState(context.Context, *GetCommittedStateRequest) (*GetCommittedStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedState not implemented")
}
func (UnimplementedSdbServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedSdbServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedSdbServer) SetTxContext(context.Context, *SetTxContextRequest) (*SetTxContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTxContext not implemented")
}
func (UnimplementedSdbServer) mustEmbedUnimplementedSdbServer() {}

// UnsafeSdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdbServer will
// result in compilation errors.
type UnsafeSdbServer interface {
	mustEmbedUnimplementedSdbServer()
}

func RegisterSdbServer(s grpc.ServiceRegistrar, srv SdbServer) {
	s.RegisterService(&Sdb_ServiceDesc, srv)
}

func _Sdb_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SubBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SubBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SubBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SubBalance(ctx, req.(*SubBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddBalance(ctx, req.(*AddBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_Suicide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuicideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).Suicide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_Suicide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).Suicide(ctx, req.(*SuicideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_HasSuicided_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasSuicidedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).HasSuicided(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_HasSuicided_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).HasSuicided(ctx, req.(*HasSuicidedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetNonce(ctx, req.(*GetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SetNonce(ctx, req.(*SetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetCodeHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetCodeHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetCodeHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetCodeHash(ctx, req.(*GetCodeHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetCode(ctx, req.(*GetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SetCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SetCode(ctx, req.(*SetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetCodeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetCodeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetCodeSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetCodeSize(ctx, req.(*GetCodeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddRefund(ctx, req.(*AddRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SubRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SubRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SubRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SubRefund(ctx, req.(*SubRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetRefund(ctx, req.(*GetRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetTransientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetTransientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetTransientState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetTransientState(ctx, req.(*GetTransientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SetTransientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTransientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SetTransientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SetTransientState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SetTransientState(ctx, req.(*SetTransientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_Exist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).Exist(ctx, req.(*ExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_Empty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).Empty(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddressInAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressInAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddressInAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddressInAccessList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddressInAccessList(ctx, req.(*AddressInAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SlotInAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotInAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SlotInAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SlotInAccessList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SlotInAccessList(ctx, req.(*SlotInAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddAddressToAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressToAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddAddressToAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddAddressToAccessList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddAddressToAccessList(ctx, req.(*AddAddressToAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddSlotToAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSlotToAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddSlotToAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddSlotToAccessList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddSlotToAccessList(ctx, req.(*AddSlotToAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_RevertToSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertToSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).RevertToSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_RevertToSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).RevertToSnapshot(ctx, req.(*RevertToSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_Snapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddPreimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPreimageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddPreimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddPreimage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddPreimage(ctx, req.(*AddPreimageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddLog(ctx, req.(*AddLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddLogJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddLogJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddLogJson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddLogJson(ctx, req.(*AddLogJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetCommittedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetCommittedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetCommittedState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetCommittedState(ctx, req.(*GetCommittedStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SetTxContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTxContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SetTxContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SetTxContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SetTxContext(ctx, req.(*SetTxContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sdb_ServiceDesc is the grpc.ServiceDesc for Sdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdb.Sdb",
	HandlerType: (*SdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Sdb_CreateAccount_Handler,
		},
		{
			MethodName: "SubBalance",
			Handler:    _Sdb_SubBalance_Handler,
		},
		{
			MethodName: "AddBalance",
			Handler:    _Sdb_AddBalance_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Sdb_GetBalance_Handler,
		},
		{
			MethodName: "Suicide",
			Handler:    _Sdb_Suicide_Handler,
		},
		{
			MethodName: "HasSuicided",
			Handler:    _Sdb_HasSuicided_Handler,
		},
		{
			MethodName: "GetNonce",
			Handler:    _Sdb_GetNonce_Handler,
		},
		{
			MethodName: "SetNonce",
			Handler:    _Sdb_SetNonce_Handler,
		},
		{
			MethodName: "GetCodeHash",
			Handler:    _Sdb_GetCodeHash_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _Sdb_GetCode_Handler,
		},
		{
			MethodName: "SetCode",
			Handler:    _Sdb_SetCode_Handler,
		},
		{
			MethodName: "GetCodeSize",
			Handler:    _Sdb_GetCodeSize_Handler,
		},
		{
			MethodName: "AddRefund",
			Handler:    _Sdb_AddRefund_Handler,
		},
		{
			MethodName: "SubRefund",
			Handler:    _Sdb_SubRefund_Handler,
		},
		{
			MethodName: "GetRefund",
			Handler:    _Sdb_GetRefund_Handler,
		},
		{
			MethodName: "GetTransientState",
			Handler:    _Sdb_GetTransientState_Handler,
		},
		{
			MethodName: "SetTransientState",
			Handler:    _Sdb_SetTransientState_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _Sdb_Exist_Handler,
		},
		{
			MethodName: "Empty",
			Handler:    _Sdb_Empty_Handler,
		},
		{
			MethodName: "AddressInAccessList",
			Handler:    _Sdb_AddressInAccessList_Handler,
		},
		{
			MethodName: "SlotInAccessList",
			Handler:    _Sdb_SlotInAccessList_Handler,
		},
		{
			MethodName: "AddAddressToAccessList",
			Handler:    _Sdb_AddAddressToAccessList_Handler,
		},
		{
			MethodName: "AddSlotToAccessList",
			Handler:    _Sdb_AddSlotToAccessList_Handler,
		},
		{
			MethodName: "RevertToSnapshot",
			Handler:    _Sdb_RevertToSnapshot_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Sdb_Snapshot_Handler,
		},
		{
			MethodName: "AddPreimage",
			Handler:    _Sdb_AddPreimage_Handler,
		},
		{
			MethodName: "AddLog",
			Handler:    _Sdb_AddLog_Handler,
		},
		{
			MethodName: "AddLogJson",
			Handler:    _Sdb_AddLogJson_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Sdb_Prepare_Handler,
		},
		{
			MethodName: "GetCommittedState",
			Handler:    _Sdb_GetCommittedState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Sdb_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _Sdb_SetState_Handler,
		},
		{
			MethodName: "SetTxContext",
			Handler:    _Sdb_SetTxContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdb.proto",
}
